// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrations_MySqlServer.Migrations
{
    [DbContext(typeof(RegisterContext))]
    [Migration("20231222054303_Changes-Props_Email_Password_To_Value_Objects")]
    partial class ChangesProps_Email_Password_To_Value_Objects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Account.Agreggates.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Merchant", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Agreggates.PlaylistPersonal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PlaylistPersonal", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Signature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DtActivation")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FlatId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlatId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Signature", (string)null);
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DtNotification")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BandId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Album", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Band", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Backdrop")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Band", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Flat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Flat", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Music<Domain.Account.Agreggates.PlaylistPersonal>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("MusicPersonal", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Music<Domain.Streaming.Agreggates.Playlist>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Music", (string)null);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FlatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FlatId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("Domain.Transactions.Agreggates.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("Domain.Transactions.Agreggates.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DtTransaction")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("MusicPlayList", b =>
                {
                    b.Property<Guid>("MusicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DtAdded")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MusicId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("MusicPlayList");
                });

            modelBuilder.Entity("MusicPlayListPersonal", b =>
                {
                    b.Property<Guid>("MusicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlaylistPersonalId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DtAdded")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MusicId", "PlaylistPersonalId");

                    b.HasIndex("PlaylistPersonalId");

                    b.ToTable("MusicPlayListPersonal");
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Customer", b =>
                {
                    b.OwnsOne("Domain.Account.ValueObject.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("varchar(150)")
                                .HasColumnName("Email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("Password");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Login")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Merchant", b =>
                {
                    b.OwnsOne("Domain.Account.ValueObject.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("MerchantId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("varchar(150)")
                                .HasColumnName("Email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("Password");

                            b1.HasKey("MerchantId");

                            b1.ToTable("Merchant");

                            b1.WithOwner()
                                .HasForeignKey("MerchantId");
                        });

                    b.Navigation("Login")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Account.Agreggates.PlaylistPersonal", b =>
                {
                    b.HasOne("Domain.Account.Agreggates.Customer", "Customer")
                        .WithMany("Playlists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Signature", b =>
                {
                    b.HasOne("Domain.Account.Agreggates.Customer", null)
                        .WithMany("Signatures")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Streaming.Agreggates.Flat", "Flat")
                        .WithMany()
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Agreggates.Merchant", null)
                        .WithMany("Signatures")
                        .HasForeignKey("MerchantId");

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Domain.Account.Agreggates.Customer", "Destination")
                        .WithMany("Notifications")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Agreggates.Merchant", null)
                        .WithMany("Notifications")
                        .HasForeignKey("MerchantId");

                    b.HasOne("Domain.Account.Agreggates.Customer", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Destination");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Album", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Band", null)
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Flat", b =>
                {
                    b.OwnsOne("Domain.Core.ValueObject.Monetary", "Value", b1 =>
                        {
                            b1.Property<Guid>("FlatId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Monetary");

                            b1.HasKey("FlatId");

                            b1.ToTable("Flat");

                            b1.WithOwner()
                                .HasForeignKey("FlatId");
                        });

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Music<Domain.Account.Agreggates.PlaylistPersonal>", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Album", null)
                        .WithMany("MusicPersonal")
                        .HasForeignKey("AlbumId");

                    b.OwnsOne("Domain.Streaming.ValueObject.Duration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("Music<PlaylistPersonal>Id")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("int")
                                .HasColumnName("Duration");

                            b1.HasKey("Music<PlaylistPersonal>Id");

                            b1.ToTable("MusicPersonal");

                            b1.WithOwner()
                                .HasForeignKey("Music<PlaylistPersonal>Id");
                        });

                    b.Navigation("Duration")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Music<Domain.Streaming.Agreggates.Playlist>", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Album", null)
                        .WithMany("Music")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Streaming.ValueObject.Duration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("Music<Playlist>Id")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("int")
                                .HasColumnName("Duration");

                            b1.HasKey("Music<Playlist>Id");

                            b1.ToTable("Music");

                            b1.WithOwner()
                                .HasForeignKey("Music<Playlist>Id");
                        });

                    b.Navigation("Duration")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Playlist", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Flat", "Flat")
                        .WithMany()
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("Domain.Transactions.Agreggates.Card", b =>
                {
                    b.HasOne("Domain.Account.Agreggates.Customer", null)
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Account.Agreggates.Merchant", null)
                        .WithMany("Cards")
                        .HasForeignKey("MerchantId");

                    b.OwnsOne("Domain.Core.ValueObject.Monetary", "Limit", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Limit");

                            b1.HasKey("CardId");

                            b1.ToTable("Card");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.OwnsOne("Domain.Transactions.ValueObject.CreditCardBrandInfo", "CardBrand", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("varchar(12)")
                                .HasColumnName("Brand");

                            b1.HasKey("CardId");

                            b1.ToTable("Card");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.OwnsOne("Domain.Transactions.ValueObject.ExpiryDate", "Validate", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("Validate");

                            b1.HasKey("CardId");

                            b1.ToTable("Card");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.Navigation("CardBrand")
                        .IsRequired();

                    b.Navigation("Limit")
                        .IsRequired();

                    b.Navigation("Validate")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Transactions.Agreggates.Transaction", b =>
                {
                    b.HasOne("Domain.Transactions.Agreggates.Card", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CardId");

                    b.OwnsOne("Domain.Core.ValueObject.Monetary", "Value", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Monetary");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Domain.Transactions.ValueObject.Merchant", "Merchant", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("CNPJ")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("MerchantCNPJ");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("MerchantName");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Merchant")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayList", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Music<Domain.Streaming.Agreggates.Playlist>", null)
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Streaming.Agreggates.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayListPersonal", b =>
                {
                    b.HasOne("Domain.Streaming.Agreggates.Music<Domain.Account.Agreggates.PlaylistPersonal>", null)
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Agreggates.PlaylistPersonal", null)
                        .WithMany()
                        .HasForeignKey("PlaylistPersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Customer", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Notifications");

                    b.Navigation("Playlists");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Domain.Account.Agreggates.Merchant", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Notifications");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Album", b =>
                {
                    b.Navigation("Music");

                    b.Navigation("MusicPersonal");
                });

            modelBuilder.Entity("Domain.Streaming.Agreggates.Band", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Domain.Transactions.Agreggates.Card", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
